{
  
    
        "post0": {
            "title": "Risk Monitoring and Mitigation of the Urban Forest",
            "content": "Urban forest is more important than you think. . We all know some benefits of trees like cleaning the air from CO2 and aesthetic reasons. . But there are more to it than you think: . Carbon sequestration/storage | Promoting diverse flora | Barrier to noisy traffic | Each large front yard tree adds about 1% to sales price of the property | Trees reduce stormwater runoff by capturing and storing rainfall in their canopy and promote the infiltration of rainwater into the soil | . But what exactly goes into sustaining the life of the trees and what are the risks of not taking it seriously? Here&#39;s where urban forest monitoring, prevention and mitigation comes in. . It includes: . Increasing public safety and examining conditions of the trees non-destructively to develop a plan of action. | Preventing sidewalk damage. | Monitoring invasive norway maple that lessen diversity of other trees and living habitat. | Monitoring Ash trees in preparation for an invasion of emerald ash borer. | Budget allocation for renewal and pruning. | . This project is going to aim to help to identify, predict possible risk and areas of attention. . For this project I&#39;ll be working with few datasets: . New-York tree inventory data taken from NYC Open Data. . Urban street tree inventory data for Newburgh, New York in 2015 . Finally, Historic Tree Inventory - 2018/2019 within the City of Buffalo . Since NYC tree inventory has more features and observations It&#39;ll be the training dataset. The other two I&#39;ll test predictions on. . Feature Engineering . The data set doesn&#39;t have many useful of features to work with but there&#39;s some possibility for feature engineering. like to combine address and street name to find out longitude and latitude of trees using geopy for ploting them using plotly on the map. . We can use a formula to make predictions of the age according to the species to create even more features. . Data Wrangling . NYC tree inventory contains close to a million observations. This dataset is updated regularly. . With that large dataset it&#39;s worrying about dropping missing values. . Wrangling this beast of the dataset was a learning experience and taught me a couple cool data filtering tricks. . df_ny_trees . dbh tpstructure tpcondition botanical_name riskrating latitude longitude . 0 26 | full | good | quercus palustris - pin oak | 7 | 40.863350 | -73.906594 | . 2 30 | full | fair | quercus palustris - pin oak | 8 | 40.710290 | -73.833408 | . 4 5 | full | good | quercus phellos - willow oak | 3 | 40.727396 | -74.007550 | . 5 10 | full | fair | acer platanoides - norway maple | 8 | 40.813687 | -73.943579 | . 6 36 | full | fair | fraxinus americana - white ash | 6 | 40.856531 | -73.790451 | . ... ... | ... | ... | ... | ... | ... | ... | . 978278 11 | full | fair | tilia cordata - littleleaf linden | 6 | 40.703732 | -73.957353 | . 978279 13 | full | good | pyrus calleryana - callery pear | 6 | 40.882492 | -73.859594 | . 978280 6 | full | good | zelkova serrata - japanese zelkova | 3 | 40.798664 | -73.963754 | . 978282 23 | full | good | quercus palustris - pin oak | 6 | 40.870463 | -73.870709 | . 978283 22 | full | fair | platanus x acerifolia - london planetree | 8 | 40.671471 | -73.879124 | . 295882 rows × 7 columns . After wrangling, this dataset reduced to around 300_000 observations. For ease of use I&#39;ll make a separate csv and load the data from there. . Let&#39;s check what is the common species of tree . df_ny_trees_wrangled[&#39;botanical_name&#39;].value_counts() . platanus x acerifolia - london planetree 43886 gleditsia triacanthos var. inermis - thornless honeylocust 24040 quercus palustris - pin oak 22991 acer platanoides - norway maple 19162 pyrus calleryana - callery pear 18539 ... robinia pseudoacacia &#39;frisia&#39; - &#39;frisia&#39; black locust 51 ulmus americana &#39;princeton&#39; - &#39;princeton&#39; american elm 51 betula populifolia - gray birch 51 picea glauca - white spruce 50 quercus palustris &#39;green pillar&#39; - &#39;green pillar&#39; pin oak 50 Name: botanical_name, Length: 153, dtype: int64 . It appears to be the most common tree is London Plane. . Here are few concerns: . The London Plane can develop massive trunks with spreading crowns, and live for centuries. But its success has been part of its demise. Its roots are so tough and aggressive, that it can lift sidewalks and curbs, invade sewer pipes, and crack building foundations. Budget allocation for any damages should be allocated. . The most common risk ratings are 3,6 and 7. That says that mostly trees in New York are taken care of. . df_ny_trees_wrangled[&#39;riskrating&#39;].value_counts(ascending=False) . 3 61217 6 59497 7 48246 5 37648 8 34804 9 22197 4 18762 10 9293 11 2807 12 1314 2 51 1 27 0 19 Name: riskrating, dtype: int64 . Let&#39;s start modeling . Identifying areas of probable risk is very important. It helps to plan and act accordingly. . In this case modeling risk rating as our target using Random Forest Classifier. . X=df_ny_trees_wrangled.drop(columns=[&#39;latitude&#39;, &#39;longitude&#39;,&#39;riskrating&#39;]) y=df_ny_trees_wrangled[&#39;riskrating&#39;] . baseline=y.value_counts(normalize=True).max()*100 baseline . 20.689666826640348 . X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=43,test_size=.2) . Dumping the model . model= load(&#39;nyc_trees.joblib&#39;) . model.score(X_train,y_train),model.score(X_test,y_test) . (0.40480344732895374, 0.3246193622522264) . Judging by the accuracy score, the model prodicted right 32% of the time. The baseline was 20.7%. Not bad but not great. . fig, ax = plt.subplots(figsize=(10, 10)) plot_confusion_matrix(model, X_test, y_test, ax=ax, values_format = &#39;.0f&#39;, display_labels = [ 7, 8, 3, 6, 9, 5, 4, 10, 12, 11, 2, 0, 1].sort()) plt.show() . print(classification_report(y_test, model.predict(X_test), target_names =[ 7, 8, 3, 6, 9, 5, 4, 10, 12, 11, 2, 0, 1].sort())) . precision recall f1-score support 0 0.00 0.00 0.00 2 1 0.00 0.00 0.00 4 2 0.00 0.00 0.00 9 3 0.46 0.66 0.54 12198 4 0.22 0.03 0.06 3749 5 0.23 0.09 0.13 7486 6 0.27 0.39 0.32 12085 7 0.28 0.34 0.31 9580 8 0.26 0.18 0.21 7026 9 0.27 0.21 0.24 4402 10 0.24 0.16 0.19 1849 11 0.16 0.05 0.08 528 12 0.09 0.03 0.05 259 accuracy 0.32 59177 macro avg 0.19 0.16 0.16 59177 weighted avg 0.30 0.32 0.30 59177 . C: Users evhorrosh Desktop VSTEST env lib site-packages sklearn metrics _classification.py:1248: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior. _warn_prf(average, modifier, msg_start, len(result)) C: Users evhorrosh Desktop VSTEST env lib site-packages sklearn metrics _classification.py:1248: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior. _warn_prf(average, modifier, msg_start, len(result)) C: Users evhorrosh Desktop VSTEST env lib site-packages sklearn metrics _classification.py:1248: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior. _warn_prf(average, modifier, msg_start, len(result)) . results . y_val y_pred . 49289 3 | 3 | . 272560 8 | 7 | . 60540 6 | 6 | . 260785 7 | 7 | . 218147 8 | 9 | . ... ... | ... | . 200511 8 | 7 | . 146238 3 | 6 | . 214819 9 | 7 | . 15859 6 | 7 | . 4879 8 | 8 | . 59177 rows × 2 columns . The map shows the risk rating of the trees in the city. A Couple thoughts that come to my mind for further investigation. . Yellow splotches(higher risk) can indicate: . Areas are either old, therefore have old trees that increase risk | Areas further from the center of the city and are more woody | Parks.Cemeteries. As the city tends to preserve that land. | . Blue splotches indicate: . Areas with construction development. As it usually leads to damaging roots and making trees high risk in the future or completely removing the tree. | Areas with newly planted trees | . fig=px.scatter_mapbox(data_frame=df_ny_trees_wrangled,lat=&#39;latitude&#39;,lon=&#39;longitude&#39;, color_discrete_sequence=[&quot;blue&quot;], zoom=11, height=900,opacity=.5,color=&#39;riskrating&#39;) fig.update_layout(mapbox_style=&quot;open-street-map&quot;) fig.update_layout(margin={&quot;r&quot;:0,&quot;t&quot;:0,&quot;l&quot;:0,&quot;b&quot;:0}) fig.show() . . Limitations/Challenges . The main challenge is to getting insight from the data that is out of my expertise. This impacted on what questions I can ask and answer. Although there are way to make the data work by engineering features challenging part was to stay on course and don&#39;t complicate without a need. . The biggest limitation is that I&#39;m not a domain expert. That makes it harder to do feature engineering | The trees measured were located on a public property only. | Due to the human factor the data isn&#39;t 100% accurate(e.g. typos and calculations) | Calculating large amount of data with a lot of classes if tricky to say the least and that affects the accuracy score | . Few things I&#39;ve learned working with real life data . Real data is messy. Evaluation of the data is done by many different people and if there are protocols for capturing the data, ultimately it&#39;s up to a person&#39;s judgement. | Rushing to the baseline. It&#39;s something I didn&#39;t remember until the end. It took me more time to clean the datasets that at the end were not so useful. Like Buffalo trees dataset at the end was a super high accuracy score, probably due to calculations were done from the same formula which caused leakage since it was so highly correlated. | It should be a cutoff time when you uknow that the dataset can&#39;t be salvaged, you need more data. | . On the tech side . To find out the location of each tree I&#39;m combining address and street into a new column. Having a full address and using geopy I&#39;m obtaining longitude and latitude data. Depending on the dataset It&#39;ll take a while. Best suited for overnight tasks. | .",
            "url": "https://ev-horrosh.github.io/better-data-blog/jupyter/2021/10/19/Risk-Prevention-and-Mitigation-of-the-Urban-Forest-Final.html",
            "relUrl": "/jupyter/2021/10/19/Risk-Prevention-and-Mitigation-of-the-Urban-Forest-Final.html",
            "date": " • Oct 19, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Urban and Rural Student Performance",
            "content": ". For my project I chose students performance data set that can be found here . Background . This data is about student achievement in secondary education of two Portuguese schools. The data attributes include student grades, demographic, social and school related features) and it was collected by using school reports and questionnaires. . Exploratory Data Analysis . school sex age address famsize Pstatus Medu Fedu Mjob Fjob reason guardian traveltime studytime failures schoolsup famsup paid activities nursery higher internet romantic famrel freetime goout Dalc Walc health absences G1 G2 G3 . 0 GP | F | 18 | U | GT3 | A | 4 | 4 | at_home | teacher | course | mother | 2 | 2 | 0 | yes | no | no | no | yes | yes | no | no | 4 | 3 | 4 | 1 | 1 | 3 | 6 | 5 | 6 | 6 | . 1 GP | F | 17 | U | GT3 | T | 1 | 1 | at_home | other | course | father | 1 | 2 | 0 | no | yes | no | no | no | yes | yes | no | 5 | 3 | 3 | 1 | 1 | 3 | 4 | 5 | 5 | 6 | . 2 GP | F | 15 | U | LE3 | T | 1 | 1 | at_home | other | other | mother | 1 | 2 | 3 | yes | no | yes | no | yes | yes | yes | no | 4 | 3 | 2 | 2 | 3 | 3 | 10 | 7 | 8 | 10 | . 3 GP | F | 15 | U | GT3 | T | 4 | 2 | health | services | home | mother | 1 | 3 | 0 | no | yes | yes | yes | yes | yes | yes | yes | 3 | 2 | 2 | 1 | 1 | 5 | 2 | 15 | 14 | 15 | . 4 GP | F | 16 | U | GT3 | T | 3 | 3 | other | other | home | father | 1 | 2 | 0 | no | yes | yes | no | yes | yes | no | no | 4 | 3 | 2 | 1 | 2 | 5 | 4 | 6 | 10 | 10 | . Although there&#39;s a lot to explore in this dataset like what factors impact student performance. Main focus was to see the differences between Urban and Rural areas. . Data dictionary can be found here . After doing a quick value_counts() it&#39;s clear that the samples for Urban area and Rural area do not have the same ratio. Urban being about x2.5 bigger. That may skew the sample representation. I will normalize the data if necessary to avoid that. . df[&#39;address&#39;].value_counts() . U 307 R 88 Name: address, dtype: int64 . After looking at the data I had a question. . Is there a difference in students&#39; average score if they were from the Rural area and raised by single/both parents? . Feature Engineering . As for Feature Engineering I&#39;ve calculated the average score. . df[&#39;avg_score&#39;]=((df[&#39;G1&#39;]+df[&#39;G2&#39;]+df[&#39;G3&#39;])/3).round(2) df . school sex age address famsize Pstatus Medu Fedu Mjob Fjob reason guardian traveltime studytime failures schoolsup famsup paid activities nursery higher internet romantic famrel freetime goout Dalc Walc health absences G1 G2 G3 avg_score . 0 GP | F | 18 | U | GT3 | A | 4 | 4 | at_home | teacher | course | mother | 2 | 2 | 0 | yes | no | no | no | yes | yes | no | no | 4 | 3 | 4 | 1 | 1 | 3 | 6 | 5 | 6 | 6 | 5.67 | . 1 GP | F | 17 | U | GT3 | T | 1 | 1 | at_home | other | course | father | 1 | 2 | 0 | no | yes | no | no | no | yes | yes | no | 5 | 3 | 3 | 1 | 1 | 3 | 4 | 5 | 5 | 6 | 5.33 | . 2 GP | F | 15 | U | LE3 | T | 1 | 1 | at_home | other | other | mother | 1 | 2 | 3 | yes | no | yes | no | yes | yes | yes | no | 4 | 3 | 2 | 2 | 3 | 3 | 10 | 7 | 8 | 10 | 8.33 | . 3 GP | F | 15 | U | GT3 | T | 4 | 2 | health | services | home | mother | 1 | 3 | 0 | no | yes | yes | yes | yes | yes | yes | yes | 3 | 2 | 2 | 1 | 1 | 5 | 2 | 15 | 14 | 15 | 14.67 | . 4 GP | F | 16 | U | GT3 | T | 3 | 3 | other | other | home | father | 1 | 2 | 0 | no | yes | yes | no | yes | yes | no | no | 4 | 3 | 2 | 1 | 2 | 5 | 4 | 6 | 10 | 10 | 8.67 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 390 MS | M | 20 | U | LE3 | A | 2 | 2 | services | services | course | other | 1 | 2 | 2 | no | yes | yes | no | yes | yes | no | no | 5 | 5 | 4 | 4 | 5 | 4 | 11 | 9 | 9 | 9 | 9.00 | . 391 MS | M | 17 | U | LE3 | T | 3 | 1 | services | services | course | mother | 2 | 1 | 0 | no | no | no | no | no | yes | yes | no | 2 | 4 | 5 | 3 | 4 | 2 | 3 | 14 | 16 | 16 | 15.33 | . 392 MS | M | 21 | R | GT3 | T | 1 | 1 | other | other | course | other | 1 | 1 | 3 | no | no | no | no | no | yes | no | no | 5 | 5 | 3 | 3 | 3 | 3 | 3 | 10 | 8 | 7 | 8.33 | . 393 MS | M | 18 | R | LE3 | T | 3 | 2 | services | other | course | mother | 3 | 1 | 0 | no | no | no | no | no | yes | yes | no | 4 | 4 | 1 | 3 | 4 | 5 | 0 | 11 | 12 | 10 | 11.00 | . 394 MS | M | 19 | U | LE3 | T | 1 | 1 | other | at_home | course | father | 1 | 1 | 0 | no | no | no | no | yes | yes | yes | no | 3 | 2 | 3 | 3 | 3 | 5 | 5 | 8 | 9 | 9 | 8.67 | . 395 rows × 34 columns . Data Wrangling . First thing I&#39;ve done after exploring the data was subsetting the dataframe with necessary varibles. . df=df.drop([&#39;school&#39;,&#39;Dalc&#39;,&#39;Walc&#39;,&#39;G1&#39;,&#39;G2&#39;,&#39;G3&#39;,&#39;romantic&#39;,&#39;nursery&#39;, &#39;schoolsup&#39;,&#39;famsup&#39;,&#39;paid&#39;,&#39;G1&#39;,&#39;G2&#39;,&#39;G3&#39;,&#39;higher&#39;,&#39;internet&#39;, &#39;freetime&#39;,&#39;goout&#39;,&#39;health&#39;],axis=1) df.head() . sex age address famsize Pstatus Medu Fedu Mjob Fjob reason guardian traveltime studytime failures activities famrel absences avg_score . 0 F | 18 | U | GT3 | A | 4 | 4 | at_home | teacher | course | mother | 2 | 2 | 0 | no | 4 | 6 | 5.67 | . 1 F | 17 | U | GT3 | T | 1 | 1 | at_home | other | course | father | 1 | 2 | 0 | no | 5 | 4 | 5.33 | . 2 F | 15 | U | LE3 | T | 1 | 1 | at_home | other | other | mother | 1 | 2 | 3 | no | 4 | 10 | 8.33 | . 3 F | 15 | U | GT3 | T | 4 | 2 | health | services | home | mother | 1 | 3 | 0 | yes | 3 | 2 | 14.67 | . 4 F | 16 | U | GT3 | T | 3 | 3 | other | other | home | father | 1 | 2 | 0 | no | 4 | 4 | 8.67 | . df=df.convert_dtypes() df.dtypes . sex string age Int64 address string famsize string Pstatus string Medu Int64 Fedu Int64 Mjob string Fjob string reason string guardian string traveltime Int64 studytime Int64 failures Int64 activities string famrel Int64 absences Int64 avg_score float64 dtype: object . df.groupby( [&#39;address&#39;,&#39;age&#39;,&#39;sex&#39;]).sum() . Medu Fedu traveltime studytime failures famrel absences avg_score . address age sex . R 15 F 20 | 22 | 14 | 25 | 7 | 34 | 38 | 87.66 | . M 18 | 17 | 13 | 14 | 2 | 23 | 22 | 56.33 | . 16 F 9 | 9 | 4 | 9 | 1 | 11 | 12 | 30.00 | . M 26 | 22 | 15 | 10 | 0 | 26 | 45 | 98.33 | . 17 F 37 | 34 | 24 | 32 | 1 | 57 | 95 | 147.00 | . M 24 | 27 | 26 | 20 | 6 | 45 | 52 | 114.00 | . 18 F 36 | 35 | 32 | 33 | 4 | 61 | 131 | 134.67 | . M 33 | 29 | 24 | 23 | 6 | 52 | 77 | 137.00 | . 19 F 7 | 7 | 3 | 9 | 3 | 14 | 52 | 29.00 | . M 6 | 6 | 9 | 6 | 6 | 17 | 12 | 32.34 | . 21 M 1 | 1 | 1 | 1 | 3 | 5 | 3 | 8.33 | . U 15 F 86 | 76 | 37 | 61 | 9 | 116 | 110 | 284.67 | . M 125 | 111 | 48 | 77 | 4 | 155 | 104 | 496.68 | . 16 F 140 | 129 | 68 | 103 | 13 | 190 | 306 | 536.30 | . M 119 | 108 | 59 | 73 | 10 | 172 | 204 | 484.64 | . 17 F 116 | 110 | 54 | 103 | 6 | 164 | 306 | 480.65 | . M 79 | 71 | 39 | 43 | 11 | 117 | 180 | 292.33 | . 18 F 77 | 72 | 39 | 70 | 4 | 119 | 130 | 297.98 | . M 76 | 67 | 35 | 50 | 10 | 98 | 158 | 261.34 | . 19 F 23 | 21 | 16 | 26 | 13 | 39 | 109 | 105.00 | . M 16 | 15 | 7 | 9 | 6 | 23 | 78 | 55.34 | . 20 F 4 | 2 | 2 | 3 | 2 | 5 | 4 | 14.67 | . M 5 | 4 | 2 | 3 | 2 | 10 | 11 | 26.67 | . 22 M 3 | 1 | 1 | 1 | 3 | 5 | 16 | 7.33 | . I filtered the data to meet the set conditions and ended up with 4 categories. . urban_single_parents_st_avg=(df[(df[&#39;address&#39;]==&#39;U&#39;) &amp; (df[&#39;Pstatus&#39;]==&#39;A&#39;)] .groupby([&#39;age&#39;])[&#39;avg_score&#39;] .mean() .round(2)) urban_parents_st_avg=(df[(df[&#39;address&#39;]==&#39;U&#39;) &amp; (df[&#39;Pstatus&#39;]==&#39;T&#39;)] .groupby([&#39;age&#39;])[&#39;avg_score&#39;] .mean() .round(2)) rural_single_parents_st_avg=(df[(df[&#39;address&#39;]==&#39;R&#39;) &amp; (df[&#39;Pstatus&#39;]==&#39;A&#39;)] .groupby([&#39;age&#39;])[&#39;avg_score&#39;] .mean() .round(2)) rural_parents_st_avg=(df[(df[&#39;address&#39;]==&#39;R&#39;) &amp; (df[&#39;Pstatus&#39;]==&#39;T&#39;)] .groupby([&#39;age&#39;])[&#39;avg_score&#39;] .mean() .round(2)) stu=pd.concat((urban_single_parents_st_avg, urban_parents_st_avg, rural_single_parents_st_avg, rural_parents_st_avg),axis=1) # Renaming stu.columns=[&#39;U_stu_avg_sc(single_parent)&#39;, &#39;U_stu_avg_sc(both_parents)&#39;, &#39;R_stu_avg_sc(single_parent)&#39;, &#39;R_stu_avg_sc(both_parents)&#39;] stu.index.name=&#39;age&#39; stu=stu.sort_index() stu.head(10) . U_stu_avg_sc(single_parent) U_stu_avg_sc(both_parents) R_stu_avg_sc(single_parent) R_stu_avg_sc(both_parents) . age . 15 12.94 | 11.38 | NaN | 9.60 | . 16 8.87 | 11.18 | 15.33 | 11.30 | . 17 9.17 | 11.11 | 10.34 | 9.61 | . 18 10.33 | 10.16 | 13.11 | 9.68 | . 19 11.00 | 9.33 | 13.33 | 8.00 | . 20 13.34 | 14.67 | NaN | NaN | . 21 NaN | NaN | NaN | 8.33 | . 22 NaN | 7.33 | NaN | NaN | . As we can see there are quite a bit of missing values. Filling NaN values with an average is not ideal, but I think I could work here. . stu=stu.fillna(stu.mean()).round(2) stu.head(10) . U_stu_avg_sc(single_parent) U_stu_avg_sc(both_parents) R_stu_avg_sc(single_parent) R_stu_avg_sc(both_parents) . age . 15 12.94 | 11.38 | 13.03 | 9.60 | . 16 8.87 | 11.18 | 15.33 | 11.30 | . 17 9.17 | 11.11 | 10.34 | 9.61 | . 18 10.33 | 10.16 | 13.11 | 9.68 | . 19 11.00 | 9.33 | 13.33 | 8.00 | . 20 13.34 | 14.67 | 13.03 | 9.42 | . 21 10.94 | 10.74 | 13.03 | 8.33 | . 22 10.94 | 7.33 | 13.03 | 9.42 | . In this table we can see students&#39; average score of single and not single from Urban and Rural areas. It seems like students of single parents from Rural areas have better scores on average compared with Urban counterparts. But students whose parents live together in Urban area have better scores. . Visualization . fig,ax=plt.subplots(figsize=(16, 9)) ax.set_title(&quot;Student&#39;s score according to where they live&quot;, fontsize=18) ax.set_xlabel(&quot;Parents&quot;) ax.set_ylabel(&quot;avg student score&quot;) sns.barplot(data=stu) plt.show() . This bar plot illustrates that students of a single parent from Rural area have better average score than other categories. . Hypothesis Test . Null Hypothesis is that the average score of students who live in Urban and Rural areas are the same. . Alternative Hypothesis is that the average scores are different. . To archive that I&#39;m going to use two sample t-test. . tval,pval=stats.ttest_ind(df[df[&#39;address&#39;]==&#39;U&#39;][&#39;avg_score&#39;],df[df[&#39;address&#39;]==&#39;R&#39;][&#39;avg_score&#39;]) pval . 0.03304768998307145 . We reject the null hypothesis at the 0.05 significance level and conclude the mean score for students from Urban area and students from Rural area is different. . That shows that students from Rural areas who live with a single parent are taking education more seriously because it could be a ticket to a better life. On the other hand, surprisingly, students from Rural areas that live with both parents have low average scores. Probably because there is no incentive for them to get higher education. Life is set for them. . Conclusion . The limitation of this data set is quite obvious. Mainly this dataset was dedicated to students, therefore there&#39;s not much data about parents. Although I&#39;ve only scratched the surface there&#39;s still a lot to explore, like relationship between going out and internet, study time and failures or why students that live with both parents in Rural areas have a lower score. .",
            "url": "https://ev-horrosh.github.io/better-data-blog/jupyter/2021/09/20/Urban-And-Rural-Student-Performance.html",
            "relUrl": "/jupyter/2021/09/20/Urban-And-Rural-Student-Performance.html",
            "date": " • Sep 20, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ev-horrosh.github.io/better-data-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ev-horrosh.github.io/better-data-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hello. I’m Ev. I love Data Science. Currently student at Lambda School. .",
          "url": "https://ev-horrosh.github.io/better-data-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ev-horrosh.github.io/better-data-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}