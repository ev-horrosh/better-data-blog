{
  
    
        "post0": {
            "title": "Urban and Rural Student Performance",
            "content": "For my this is students performance data set that can be found here . school sex age address famsize Pstatus Medu Fedu Mjob Fjob reason guardian traveltime studytime failures schoolsup famsup paid activities nursery higher internet romantic famrel freetime goout Dalc Walc health absences G1 G2 G3 . 0 GP | F | 18 | U | GT3 | A | 4 | 4 | at_home | teacher | course | mother | 2 | 2 | 0 | yes | no | no | no | yes | yes | no | no | 4 | 3 | 4 | 1 | 1 | 3 | 6 | 5 | 6 | 6 | . 1 GP | F | 17 | U | GT3 | T | 1 | 1 | at_home | other | course | father | 1 | 2 | 0 | no | yes | no | no | no | yes | yes | no | 5 | 3 | 3 | 1 | 1 | 3 | 4 | 5 | 5 | 6 | . 2 GP | F | 15 | U | LE3 | T | 1 | 1 | at_home | other | other | mother | 1 | 2 | 3 | yes | no | yes | no | yes | yes | yes | no | 4 | 3 | 2 | 2 | 3 | 3 | 10 | 7 | 8 | 10 | . 3 GP | F | 15 | U | GT3 | T | 4 | 2 | health | services | home | mother | 1 | 3 | 0 | no | yes | yes | yes | yes | yes | yes | yes | 3 | 2 | 2 | 1 | 1 | 5 | 2 | 15 | 14 | 15 | . 4 GP | F | 16 | U | GT3 | T | 3 | 3 | other | other | home | father | 1 | 2 | 0 | no | yes | yes | no | yes | yes | no | no | 4 | 3 | 2 | 1 | 2 | 5 | 4 | 6 | 10 | 10 | . . Although there&#39;s a lot to explore in this dataset like what factors impact student performance. Main focus was to see the differences between Urban and Rural areas but more from the parents&#39; perspective. At the end I chose these variables to analyze: . here&#39;s data dictionary: . sex - student&#39;s sex (binary: &quot;F&quot; - female or &quot;M&quot; - male) | age - student&#39;s age (numeric: from 15 to 22) | address - student&#39;s home address type (binary: &quot;U&quot; - urban or &quot;R&quot; - rural) | famsize - family size (binary: &quot;LE3&quot; - less or equal to 3 or &quot;GT3&quot; - greater than 3) | Pstatus - parent&#39;s cohabitation status (binary: &quot;T&quot; - living together or &quot;A&quot; - apart) | Medu - mother&#39;s education (numeric: 0 - none, 1 - primary education (4th grade), 2 – 5th to 9th grade, 3 – secondary education or 4 – higher education) | Fedu - father&#39;s education (numeric: 0 - none, 1 - primary education (4th grade), 2 – 5th to 9th grade, 3 – secondary education or 4 – higher education) | Mjob - mother&#39;s job (nominal: &quot;teacher&quot;, &quot;health&quot; care related, civil &quot;services&quot; (e.g. administrative or police), &quot;at_home&quot; or &quot;other&quot;) | Fjob - father&#39;s job (nominal: &quot;teacher&quot;, &quot;health&quot; care related, civil &quot;services&quot; (e.g. administrative or police), &quot;at_home&quot; or &quot;other&quot;) | reason - reason to choose this school (nominal: close to &quot;home&quot;, school &quot;reputation&quot;, &quot;course&quot; preference or &quot;other&quot;) | traveltime - home to school travel time (numeric: 1 - &lt;15 min., 2 - 15 to 30 min., 3 - 30 min. to 1 hour, or 4 - &gt;1 hour) | studytime - weekly study time (numeric: 1 - &lt;2 hours, 2 - 2 to 5 hours, 3 - 5 to 10 hours, or 4 - &gt;10 hours) | famsup - family educational support (binary: yes or no) | higher - wants to take higher education (binary: yes or no) | famrel - quality of family relationships (numeric: from 1 - very bad to 5 - excellent) | freetime - free time after school (numeric: from 1 - very low to 5 - very high) | goout - going out with friends (numeric: from 1 - very low to 5 - very high) | health - current health status (numeric: from 1 - very bad to 5 - very good) | absences - number of school absences (numeric: from 0 to 93) | G1 - first period grade (numeric: from 0 to 20) | G2 - second period grade (numeric: from 0 to 20) | G3 - final grade (numeric: from 0 to 20, output target) | . Data Wrangling . First thing I&#39;ve done after exploring the data was subsetting the dataframe with necessary varibles. . The limitation of this data set is quite obviuous. Mainly this dataset was dedicated students, therefore there&#39;s not really a lot of info about parents. . df[&#39;avg_score&#39;]=((df[&#39;G1&#39;]+df[&#39;G2&#39;]+df[&#39;G3&#39;])/3).round(2) df . school sex age address famsize Pstatus Medu Fedu Mjob Fjob reason guardian traveltime studytime failures schoolsup famsup paid activities nursery higher internet romantic famrel freetime goout Dalc Walc health absences G1 G2 G3 avg_score . 0 GP | F | 18 | U | GT3 | A | 4 | 4 | at_home | teacher | course | mother | 2 | 2 | 0 | yes | no | no | no | yes | yes | no | no | 4 | 3 | 4 | 1 | 1 | 3 | 6 | 5 | 6 | 6 | 5.67 | . 1 GP | F | 17 | U | GT3 | T | 1 | 1 | at_home | other | course | father | 1 | 2 | 0 | no | yes | no | no | no | yes | yes | no | 5 | 3 | 3 | 1 | 1 | 3 | 4 | 5 | 5 | 6 | 5.33 | . 2 GP | F | 15 | U | LE3 | T | 1 | 1 | at_home | other | other | mother | 1 | 2 | 3 | yes | no | yes | no | yes | yes | yes | no | 4 | 3 | 2 | 2 | 3 | 3 | 10 | 7 | 8 | 10 | 8.33 | . 3 GP | F | 15 | U | GT3 | T | 4 | 2 | health | services | home | mother | 1 | 3 | 0 | no | yes | yes | yes | yes | yes | yes | yes | 3 | 2 | 2 | 1 | 1 | 5 | 2 | 15 | 14 | 15 | 14.67 | . 4 GP | F | 16 | U | GT3 | T | 3 | 3 | other | other | home | father | 1 | 2 | 0 | no | yes | yes | no | yes | yes | no | no | 4 | 3 | 2 | 1 | 2 | 5 | 4 | 6 | 10 | 10 | 8.67 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 390 MS | M | 20 | U | LE3 | A | 2 | 2 | services | services | course | other | 1 | 2 | 2 | no | yes | yes | no | yes | yes | no | no | 5 | 5 | 4 | 4 | 5 | 4 | 11 | 9 | 9 | 9 | 9.00 | . 391 MS | M | 17 | U | LE3 | T | 3 | 1 | services | services | course | mother | 2 | 1 | 0 | no | no | no | no | no | yes | yes | no | 2 | 4 | 5 | 3 | 4 | 2 | 3 | 14 | 16 | 16 | 15.33 | . 392 MS | M | 21 | R | GT3 | T | 1 | 1 | other | other | course | other | 1 | 1 | 3 | no | no | no | no | no | yes | no | no | 5 | 5 | 3 | 3 | 3 | 3 | 3 | 10 | 8 | 7 | 8.33 | . 393 MS | M | 18 | R | LE3 | T | 3 | 2 | services | other | course | mother | 3 | 1 | 0 | no | no | no | no | no | yes | yes | no | 4 | 4 | 1 | 3 | 4 | 5 | 0 | 11 | 12 | 10 | 11.00 | . 394 MS | M | 19 | U | LE3 | T | 1 | 1 | other | at_home | course | father | 1 | 1 | 0 | no | no | no | no | yes | yes | yes | no | 3 | 2 | 3 | 3 | 3 | 5 | 5 | 8 | 9 | 9 | 8.67 | . 395 rows × 34 columns . After doing a quick value counts it&#39;s clear that the samples for Urban area and Rural area do not have the same ratio. Urban being about x2.5 bigger. That may skew the sample representation. . df[&#39;address&#39;].value_counts() . U 307 R 88 Name: address, dtype: int64 . df=df.convert_dtypes() . df.groupby( [&#39;address&#39;,&#39;age&#39;,&#39;sex&#39;]).sum() . Medu Fedu traveltime studytime failures famrel freetime goout health absences avg_score . address age sex . R 15 F 20 | 22 | 14 | 25 | 7 | 34 | 22 | 19 | 33 | 38 | 87.66 | . M 18 | 17 | 13 | 14 | 2 | 23 | 23 | 20 | 20 | 22 | 56.33 | . 16 F 9 | 9 | 4 | 9 | 1 | 11 | 8 | 11 | 11 | 12 | 30.00 | . M 26 | 22 | 15 | 10 | 0 | 26 | 26 | 24 | 30 | 45 | 98.33 | . 17 F 37 | 34 | 24 | 32 | 1 | 57 | 43 | 40 | 47 | 95 | 147.00 | . M 24 | 27 | 26 | 20 | 6 | 45 | 41 | 40 | 45 | 52 | 114.00 | . 18 F 36 | 35 | 32 | 33 | 4 | 61 | 41 | 45 | 53 | 131 | 134.67 | . M 33 | 29 | 24 | 23 | 6 | 52 | 45 | 39 | 50 | 77 | 137.00 | . 19 F 7 | 7 | 3 | 9 | 3 | 14 | 9 | 7 | 13 | 52 | 29.00 | . M 6 | 6 | 9 | 6 | 6 | 17 | 16 | 13 | 17 | 12 | 32.34 | . 21 M 1 | 1 | 1 | 1 | 3 | 5 | 5 | 3 | 3 | 3 | 8.33 | . U 15 F 86 | 76 | 37 | 61 | 9 | 116 | 89 | 82 | 100 | 110 | 284.67 | . M 125 | 111 | 48 | 77 | 4 | 155 | 135 | 104 | 141 | 104 | 496.68 | . 16 F 140 | 129 | 68 | 103 | 13 | 190 | 159 | 163 | 176 | 306 | 536.30 | . M 119 | 108 | 59 | 73 | 10 | 172 | 143 | 132 | 168 | 204 | 484.64 | . 17 F 116 | 110 | 54 | 103 | 6 | 164 | 130 | 132 | 143 | 306 | 480.65 | . M 79 | 71 | 39 | 43 | 11 | 117 | 102 | 102 | 108 | 180 | 292.33 | . 18 F 77 | 72 | 39 | 70 | 4 | 119 | 90 | 96 | 88 | 130 | 297.98 | . M 76 | 67 | 35 | 50 | 10 | 98 | 80 | 91 | 91 | 158 | 261.34 | . 19 F 23 | 21 | 16 | 26 | 13 | 39 | 31 | 32 | 33 | 109 | 105.00 | . M 16 | 15 | 7 | 9 | 6 | 23 | 22 | 18 | 21 | 78 | 55.34 | . 20 F 4 | 2 | 2 | 3 | 2 | 5 | 4 | 3 | 3 | 4 | 14.67 | . M 5 | 4 | 2 | 3 | 2 | 10 | 10 | 7 | 9 | 11 | 26.67 | . 22 M 3 | 1 | 1 | 1 | 3 | 5 | 4 | 5 | 1 | 16 | 7.33 | . . urban_single_parents_st_avg=df[(df[&#39;address&#39;]==&#39;U&#39;) &amp; (df[&#39;Pstatus&#39;]==&#39;A&#39;)].groupby([&#39;age&#39;])[&#39;avg_score&#39;].mean().round(2) urban_parents_st_avg=df[(df[&#39;address&#39;]==&#39;U&#39;) &amp; (df[&#39;Pstatus&#39;]==&#39;T&#39;)].groupby([&#39;age&#39;])[&#39;avg_score&#39;].mean().round(2) rural_single_parents_st_avg=df[(df[&#39;address&#39;]==&#39;R&#39;) &amp; (df[&#39;Pstatus&#39;]==&#39;A&#39;)].groupby([&#39;age&#39;])[&#39;avg_score&#39;].mean().round(2) rural_parents_st_avg=df[(df[&#39;address&#39;]==&#39;R&#39;) &amp; (df[&#39;Pstatus&#39;]==&#39;T&#39;)].groupby([&#39;age&#39;])[&#39;avg_score&#39;].mean().round(2) stu=pd.concat((urban_single_parents_st_avg, urban_parents_st_avg,rural_single_parents_st_avg,rural_parents_st_avg),axis=1) stu.columns=[&#39;U_single_parents_st_avg&#39;, &#39;U_parents_st_avg&#39;,&#39;R_single_parents_st_avg&#39;,&#39;R_parents_st_avg&#39;] stu.index.name=&#39;age&#39; stu=stu.sort_index() stu.head(10) . U_single_parents_st_avg U_parents_st_avg R_single_parents_st_avg R_parents_st_avg . age . 15 12.94 | 11.38 | NaN | 9.60 | . 16 8.87 | 11.18 | 15.33 | 11.30 | . 17 9.17 | 11.11 | 10.34 | 9.61 | . 18 10.33 | 10.16 | 13.11 | 9.68 | . 19 11.00 | 9.33 | 13.33 | 8.00 | . 20 13.34 | 14.67 | NaN | NaN | . 21 NaN | NaN | NaN | 8.33 | . 22 NaN | 7.33 | NaN | NaN | . . In this table we can see students&#39; average score of single and not single from Urban and Rural areas. It seems like students of single parents from Rural areas have better scores on average compared with Urban counterparts. But students whose parents live together in Urban area have better scores. . As we can see there are quite a bit of missing values. Let&#39;s fill them with average. . stu=stu.fillna(stu.mean()).round(2) stu.head(10) . U_single_parents_st_avg U_parents_st_avg R_single_parents_st_avg R_parents_st_avg . age . 15 12.94 | 11.38 | 13.03 | 9.60 | . 16 8.87 | 11.18 | 15.33 | 11.30 | . 17 9.17 | 11.11 | 10.34 | 9.61 | . 18 10.33 | 10.16 | 13.11 | 9.68 | . 19 11.00 | 9.33 | 13.33 | 8.00 | . 20 13.34 | 14.67 | 13.03 | 9.42 | . 21 10.94 | 10.74 | 13.03 | 8.33 | . 22 10.94 | 7.33 | 13.03 | 9.42 | . . Most of the parents live together mothers get highest education mostly fathers education is usually from 5th -9th grade. following the secondary education maybe related to the fact that men start working early. . Feature Engineering . I&#39;ve calculated the average score . urban_single_parents_famrel=df[(df[&#39;address&#39;]==&#39;U&#39;) &amp; (df[&#39;Pstatus&#39;]==&#39;A&#39;)].groupby([&#39;age&#39;])[&#39;famrel&#39;].mean().round(2) urban_parents_famrel=df[(df[&#39;address&#39;]==&#39;U&#39;) &amp; (df[&#39;Pstatus&#39;]==&#39;T&#39;)].groupby([&#39;age&#39;])[&#39;famrel&#39;].mean().round(2) rural_single_parents_famrel=df[(df[&#39;address&#39;]==&#39;R&#39;) &amp; (df[&#39;Pstatus&#39;]==&#39;A&#39;)].groupby([&#39;age&#39;])[&#39;famrel&#39;].mean().round(2) rural_parents_famrel=df[(df[&#39;address&#39;]==&#39;R&#39;) &amp; (df[&#39;Pstatus&#39;]==&#39;T&#39;)].groupby([&#39;age&#39;])[&#39;famrel&#39;].mean().round(2) stu_famrel=pd.concat((urban_single_parents_famrel,urban_parents_famrel,rural_single_parents_famrel,rural_parents_famrel),axis=1) # stu_famrel.dropna() stu_famrel . urban_single_parents_famrel=df[(df[&#39;address&#39;]==&#39;U&#39;) &amp; (df[&#39;Pstatus&#39;]==&#39;A&#39;)].groupby([&#39;age&#39;])[&#39;health&#39;].mean().round(2) urban_parents_famrel=df[(df[&#39;address&#39;]==&#39;U&#39;) &amp; (df[&#39;Pstatus&#39;]==&#39;T&#39;)].groupby([&#39;age&#39;])[&#39;health&#39;].mean().round(2) rural_single_parents_famrel=df[(df[&#39;address&#39;]==&#39;R&#39;) &amp; (df[&#39;Pstatus&#39;]==&#39;A&#39;)].groupby([&#39;age&#39;])[&#39;health&#39;].mean().round(2) rural_parents_famrel=df[(df[&#39;address&#39;]==&#39;R&#39;) &amp; (df[&#39;Pstatus&#39;]==&#39;T&#39;)].groupby([&#39;age&#39;])[&#39;health&#39;].mean().round(2) stu_famrel=pd.concat((urban_single_parents_famrel,urban_parents_famrel,rural_single_parents_famrel,rural_parents_famrel),axis=1) # stu_famrel.dropna() stu_famrel . health 3.178333 health 3.074286 health 4.167500 health 3.595000 dtype: float64 .",
            "url": "https://ev-horrosh.github.io/better-data-blog/jupyter/2021/09/20/Urban-And-Rural-Student-Performance.html",
            "relUrl": "/jupyter/2021/09/20/Urban-And-Rural-Student-Performance.html",
            "date": " • Sep 20, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ev-horrosh.github.io/better-data-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ev-horrosh.github.io/better-data-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hello. I’m Ev. I love Data Science. Currently student at Lambda School. .",
          "url": "https://ev-horrosh.github.io/better-data-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ev-horrosh.github.io/better-data-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}